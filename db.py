# -*- coding: utf-8 -*-
"""Db.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qn-gzKYagoWJbe24HwGUbBSPYf7Nhgvf
"""

import pandas as pd
import numpy as np
from sqlalchemy import create_engine, Column, Integer, Float
from sqlalchemy.ext.declarative import declarative_base
import matplotlib.pyplot as plt
from bokeh.plotting import figure, show, output_file
from sqlalchemy.orm import declarative_base
import unittest

# Create SQLite database
engine = create_engine('sqlite:///mydb.db')
Base = declarative_base()

# Define database tables
class TrainingData(Base):
    __tablename__ = 'training_data'
    id = Column(Integer, primary_key=True)
    x = Column(Float)
    y1 = Column(Float)
    y2 = Column(Float)
    y3 = Column(Float)
    y4 = Column(Float)

class IdealFunctions(Base):
    __tablename__ = 'ideal_functions'
    id = Column(Integer, primary_key=True)
    x = Column(Float)
    y1 = Column(Float)
    y2 = Column(Float)
    y3 = Column(Float)
    y4 = Column(Float)
    y5 = Column(Float)
    y6 = Column(Float)
    y7 = Column(Float)
    y8 = Column(Float)
    y9 = Column(Float)
    y10 = Column(Float)
    y11 = Column(Float)
    y12 = Column(Float)
    y13 = Column(Float)
    y14 = Column(Float)
    y15 = Column(Float)
    y16 = Column(Float)
    y17 = Column(Float)
    y18 = Column(Float)
    y19 = Column(Float)
    y20 = Column(Float)
    y21 = Column(Float)
    y22 = Column(Float)
    y23 = Column(Float)
    y24 = Column(Float)
    y25 = Column(Float)
    y26 = Column(Float)
    y27 = Column(Float)
    y28 = Column(Float)
    y29 = Column(Float)
    y30 = Column(Float)
    y31 = Column(Float)
    y32 = Column(Float)
    y33 = Column(Float)
    y34 = Column(Float)
    y35 = Column(Float)
    y36 = Column(Float)
    y37 = Column(Float)
    y38 = Column(Float)
    y39 = Column(Float)
    y40 = Column(Float)
    y41 = Column(Float)
    y42 = Column(Float)
    y43 = Column(Float)
    y44 = Column(Float)
    y45 = Column(Float)
    y46 = Column(Float)
    y47 = Column(Float)
    y48 = Column(Float)
    y49 = Column(Float)
    y50 = Column(Float)

class TestData(Base):
    __tablename__ = 'test_data'
    id = Column(Integer, primary_key=True)
    x = Column(Float)
    y = Column(Float)
    delta_y = Column(Float)
    ideal_function_no = Column(Integer)

# Load data into database
Base.metadata.create_all(engine)

# Load training data
training_data = pd.read_csv('train.csv')
training_data.to_sql('training_data', engine, if_exists='replace', index=False)

# Load ideal functions
ideal_functions = pd.read_csv('ideal.csv')
ideal_functions.to_sql('ideal_functions', engine, if_exists='replace', index=False)

# Load test data
test_data = pd.read_csv('test.csv')

# Choose the four best ideal functions for the training data
training_data_df = pd.read_sql_table('training_data', engine)
ideal_functions_df = pd.read_sql_table('ideal_functions', engine)

# Find the four ideal functions that minimize the sum of squared y-deviations
best_ideal_functions = []
min_sum_squared_deviation = float('inf')
for i in range(1, 51):
    ideal_function_cols = [f'y{i}' for i in range(1, i+1)]
    deviations = ((training_data_df[['y1', 'y2', 'y3', 'y4']] - ideal_functions_df[ideal_function_cols])**2).sum().sum()
    if deviations < min_sum_squared_deviation:
        min_sum_squared_deviation = deviations
        best_ideal_functions = ideal_function_cols

test_data_df = pd.concat([test_data_df, pd.DataFrame({'x': x, 'y': y, 'delta_y': delta_y, 'ideal_function_no': ideal_function_no}, index=[0])], ignore_index=True)

# Assign test data to the four chosen ideal functions
test_data_df = pd.DataFrame(columns=['x', 'y', 'delta_y', 'ideal_function_no'])
for _, row in test_data.iterrows():
    x, y = row['x'], row['y']
    deviations = [(row['y'] - ideal_functions_df.loc[i, col])**2 for i, col in enumerate(best_ideal_functions)]
    min_deviation = min(deviations)
    if min_deviation <= max(training_data_df[['y1', 'y2', 'y3', 'y4']].max()) * np.sqrt(2):
        ideal_function_no = deviations.index(min_deviation) + 1
        delta_y = np.sqrt(min_deviation)
        test_data_df = pd.concat([test_data_df, pd.DataFrame({'x': x, 'y': y, 'delta_y': delta_y, 'ideal_function_no': ideal_function_no}, index=[0])], ignore_index=True)

# Save test data to database
test_data_df.to_sql('test_data', engine, if_exists='replace', index=False)

# Visualize the results
plt.figure(figsize=(12, 8))
plt.scatter(training_data_df['x'], training_data_df['y1'], label='Training Data 1')
plt.scatter(training_data_df['x'], training_data_df['y2'], label='Training Data 2')
plt.scatter(training_data_df['x'], training_data_df['y3'], label='Training Data 3')
plt.scatter(training_data_df['x'], training_data_df['y4'], label='Training Data 4')

for i, col in enumerate(best_ideal_functions):
    plt.plot(ideal_functions_df['x'], ideal_functions_df[col], label=f'Ideal Function {i+1}')

plt.scatter(test_data_df['x'], test_data_df['y'], c=test_data_df['ideal_function_no'], cmap='viridis', label='Test Data')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Training Data, Ideal Functions, and Test Data')
plt.legend()
plt.show()

# Git commands
!git clone -b develop https://github.com/.....
# Make changes to the code
!git add .
!git commit -m "Add new function"
!git push origin develop

